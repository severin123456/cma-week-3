---
title: "Untitled"
format: html
---

Titel \## \## Task 1

Ctrl+ Alt + I

```{r}

library(tidyverse)


wildschwein <- read_csv("data/Wildschwein_BE_2056.csv")

wildschwein$TierName |> unique()

as.POSIXct("2015-07-01", tz="UTC")


sabi <- wildschwein |> 
  filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz="UTC"),
         DatetimeUTC < as.POSIXct("2015-07-03", tz="UTC")
)

ggplot(sabi, aes(E,N))+
  geom_point()+
  geom_path()+
  coord_equal()

sabi |> 
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1))+
  geom_point()

sabi <- sabi |> 
  mutate(
    n_plus1 = sqrt((lead(E, 1)-E)^2+(lead(N, 1)-N)^2),
    n_plus2 = sqrt((lead(E, 2)-E)^2+(lead(N, 2)-N)^2),
    n_minus1 = sqrt((lag(E, 1)-E)^2+(lag(N, 1)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2+(lag(N, 2)-N)^2)
  )

sabi <- sabi |> 
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |> 
  ungroup()

ggplot(sabi, aes(stepMean))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = T))

sabi |> 
  mutate(static= stepMean < mean(stepMean, na.rm = T)) |> 
  ggplot(aes(E,N))+
  geom_path()+
  geom_point(aes(color = static))+
  coord_fixed()
  

```

Posmo Daten Aufgabe

![](https://computationalmovementanalysis.github.io/FS23/02_Images/laube_2011.jpg)

```{r}
library(sf)
library(readr)
library(dplyr)
library(ggplot2)
library(tmap)
posmo <- read_csv("data/posmo_2023-01-01T00_00_00+01_00-2023-05-05T23_59_59+02_00.csv")

posmo <- select(posmo, datetime, lon_x, lat_y)

sum(is.na(posmo$lon_x))
sum(is.na(posmo$lat_y))
#7 Werte NA

#Löschen von NA Werten in den Koordinaten
posmo <- posmo |> filter(!is.na(lon_x))

posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)

#Die Koordinaten aus posmo extrahieren und dem 
#Datensatz hinzufügen
posmo_coordinates <- st_coordinates(posmo)
posmo <- cbind(posmo, posmo_coordinates)

#Einzelnen Tag extrahieren
posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-03-26")

#Plot mit Pfad
ggplot(posmo_filter, aes(X,Y))+
  geom_path()+
  coord_equal()

#Es gibt eine Lücke in der Datenerhebung...Also keine kontinuierlichen Daten?
posmo_filter |> 
  head(50) |> 
  ggplot(aes(datetime, 1))+
  geom_point()

#Temporal Window Im datensatz werden etwa alle 10 sec Daten erhoben. Im Wildschwein Datensatz alle 15 min...mit dem unten abgebildeten Code würde das Temporal Window also statt 60min(Wildschewein) etwa 40 sec lang sein.
#pos[n-2] to pos[n]
#pos[n-1] to pos[n]
#pos[n] to pos[n+1]
#pos[n] to pos[n+2]
#Das ist Schritt a im Bild aus Laube and Purves (2011)(siehe visual)

#Also kann man die Euklidischen Distanzen der Punkte im temporal Window folgendermassen berechnen.
posmo_filter <- posmo_filter |> 
  mutate(
    n_plus1 = sqrt((lead(X, 1)-X)^2+(lead(Y, 1)-Y)^2),
    n_plus2 = sqrt((lead(X, 2)-X)^2+(lead(Y, 2)-Y)^2),
    n_minus1 = sqrt((lag(X, 1)-X)^2+(lag(Y, 1)-Y)^2),
    n_minus2 = sqrt((lag(X, 2)-X)^2+(lag(Y, 2)-Y)^2)
  )
#Das war schritt b

#Die Mittelwerte der neuen Spalten Reihenweise als neue Spalte berechnen. rowwise()  um diese Gruppierung wieder zu beenden -> ungroup()
posmo_filter <- posmo_filter |> 
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |> 
  ungroup()

#Histogram um "statische Punkte" ausfindig zu machen, geom_vline ist dabei der treshold unter welchen ich als nicht bewegend gelte.
ggplot(posmo_filter, aes(stepMean))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMean, na.rm = T))

#Entfernen der static Points
posmo_filter <- posmo_filter |> 
  ungroup() |> 
  mutate(static = stepMean < mean(stepMean, na.rm = T))

#Die Werte FALSE in der Spalte static behalten, TRUE entfernen.
posmo_filter_move <- posmo_filter |> 
  filter(!static)

posmo_filter |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()+
  theme(legend.position = "bottom")

posmo_filter_move |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point()+
  coord_fixed()+
  theme(legend.position = "bottom")

#Nun muss für alle Segmente eine einzigartige ID erstellt werden. Diese kann als grouping Variable verwendet werden.
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static))

head(posmo_filter)

posmo_filter |> 
  ggplot(aes(X,Y))+
  geom_path(aes(color=segment_id))+
  geom_point(aes(color= segment_id))+
  scale_color_hue()
  coord_fixed()+
  theme(legend.position = "bottom")

#Filtern der Segmente mit mehr als 5 min
posmo_filter_long <- posmo_filter %>%
  arrange(segment_id, datetime) %>%
  mutate(time_diff = difftime(datetime, lag(datetime), units = "mins"),
         time_diff = ifelse(is.na(time_diff), 0, time_diff)) %>%
  group_by(segment_id) %>%
  mutate(cumulative_time = cumsum(time_diff)) %>%
  filter(cumulative_time > 5) %>%
  ungroup()

posmo_filter_long |> 
  ggplot(aes(X,Y))+
  geom_path(aes(color=segment_id))+
  geom_point(aes(color= segment_id))+
  scale_color_hue()
  coord_fixed()+
  theme(legend.position = "bottom")
  
  
pedest <- read_csv("data/pedestrian.csv")

ggplot(pedest, aes(x = E, y = N, group = TrajID)) +
  geom_path() +
  labs(x = "Easting", y = "Northing")

plots <- lapply(unique(pedest$TrajID), function(id){
  ggplot(pedest[pedest$TrajID == id,], aes(E, N)) +
    geom_path() +
    ggtitle(paste("TrajID", id))
})
library(cowplot)
plot_grid(plotlist = plots)

Traj1 <- pedest |> 
  filter(TrajID==1) |> 
  as.matrix() 
Traj2 <- pedest |> 
  filter(TrajID==2) |> 
  as.matrix()
Traj3 <- pedest |> 
  filter(TrajID==3) |> 
  as.matrix()
Traj4 <- pedest |> 
  filter(TrajID==4) |> 
  as.matrix()
Traj5 <- pedest |> 
  filter(TrajID==5) |> 
  as.matrix()
Traj6 <- pedest |> 
  filter(TrajID==6) |> 
  as.matrix()
#Hier sind die Werte nicht numeric

library(SimilarityMeasures)
help(package = "SimilarityMeasures")

E1 <- as.numeric(pedest$E[pedest$TrajID == 1])
N1 <- as.numeric(pedest$N[pedest$TrajID == 1])
E2 <- as.numeric(pedest$E[pedest$TrajID == 2])
N2 <- as.numeric(pedest$N[pedest$TrajID == 2])
E3 <- as.numeric(pedest$E[pedest$TrajID == 3])
N3 <- as.numeric(pedest$N[pedest$TrajID == 3])
E4 <- as.numeric(pedest$E[pedest$TrajID == 4])
N4 <- as.numeric(pedest$N[pedest$TrajID == 4])
E5 <- as.numeric(pedest$E[pedest$TrajID == 5])
N5 <- as.numeric(pedest$N[pedest$TrajID == 5])
E6 <- as.numeric(pedest$E[pedest$TrajID == 6])
N6 <- as.numeric(pedest$N[pedest$TrajID == 6])
Traj1 = cbind(E1, N1)
Traj2 = cbind(E2, N2)
Traj3 = cbind(E3, N3)
Traj4 = cbind(E4, N4)
Traj5 = cbind(E5, N5)
Traj6 = cbind(E6, N6)

EditDist(Traj1, Traj2, pointDistance = 20)
EditDist(Traj1, Traj3, pointDistance = 20)
EditDist(Traj1, Traj4, pointDistance = 20)
EditDist(Traj1, Traj5, pointDistance = 20)
EditDist(Traj1, Traj6, pointDistance = 20)
EditDist(Traj1, Traj1, pointDistance = 20)
#Traj1 und Traj6 sind sich demnach am ähnlichsten

DTW(Traj1, Traj2, pointSpacing=-1)
DTW(Traj1, Traj3, pointSpacing=-1)
DTW(Traj1, Traj4, pointSpacing=-1)
DTW(Traj1, Traj5, pointSpacing=-1)
DTW(Traj1, Traj6, pointSpacing=-1)
DTW(Traj1, Traj1, pointSpacing=-1)
#Wieder 1 und 6

Frechet(Traj1, Traj2, testLeash=-1)
Frechet(Traj1, Traj3, testLeash=-1)
Frechet(Traj1, Traj4, testLeash=-1)
Frechet(Traj1, Traj5, testLeash=-1)
Frechet(Traj1, Traj6, testLeash=-1)
Frechet(Traj1, Traj1, testLeash=-1)
#Traj1 und Traj2

LCSS(Traj1, Traj2, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
LCSS(Traj1, Traj3, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
LCSS(Traj1, Traj4, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
LCSS(Traj1, Traj5, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
LCSS(Traj1, Traj6, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
LCSS(Traj1, Traj1, pointSpacing=-1, pointDistance=20, 
     errorMarg=2, returnTrans=FALSE)
```
